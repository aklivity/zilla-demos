asyncapi: 3.0.0
info:
  title: API Document for Confluent Cluster
  version: 1.0.0
servers:
  plain:
    host: localhost:9092
    protocol: kafka
channels:
  streampay-commands:
    address: streampay-commands
    messages:
      StreampayCommands.message:
        $ref: '#/components/messages/StreampayCommandsMessage'
    description: <nil>
    bindings:
      kafka:
        bindingVersion: 0.4.0
        partitions: 1
        topicConfiguration:
          cleanup.policy:
            - delete
          retention.ms: 604800000
          retention.bytes: -1
          delete.retention.ms: 86400000
          max.message.bytes: 2097164
        x-configs:
          compression.type: producer
          file.delete.delay.ms: '60000'
          flush.messages: '9223372036854775807'
          flush.ms: '9223372036854775807'
          follower.replication.throttled.replicas: ''
          index.interval.bytes: '4096'
          leader.replication.throttled.replicas: ''
          local.retention.bytes: '-2'
          local.retention.ms: '-2'
          max.compaction.lag.ms: '9223372036854775807'
          message.downconversion.enable: 'true'
          message.format.version: 3.0-IV1
          message.timestamp.after.max.ms: '9223372036854775807'
          message.timestamp.before.max.ms: '9223372036854775807'
          message.timestamp.difference.max.ms: '9223372036854775807'
          message.timestamp.type: CreateTime
          min.cleanable.dirty.ratio: '0.5'
          min.compaction.lag.ms: '0'
          min.insync.replicas: '2'
          preallocate: 'false'
          remote.storage.enable: 'false'
          segment.bytes: '104857600'
          segment.index.bytes: '10485760'
          segment.jitter.ms: '0'
          segment.ms: '604800000'
          unclean.leader.election.enable: 'false'
    x-messageCompatibility: BACKWARD
  streampay-replies:
    address: streampay-replies
    messages:
      StreampayReplies.message:
        $ref: '#/components/messages/StreampayRepliesMessage'
    description: <nil>
    bindings:
      kafka:
        bindingVersion: 0.4.0
        partitions: 1
        topicConfiguration:
          cleanup.policy:
            - delete
          retention.ms: 604800000
          retention.bytes: -1
          delete.retention.ms: 86400000
          max.message.bytes: 2097164
        x-configs:
          compression.type: producer
          file.delete.delay.ms: '60000'
          flush.messages: '9223372036854775807'
          flush.ms: '9223372036854775807'
          follower.replication.throttled.replicas: ''
          index.interval.bytes: '4096'
          leader.replication.throttled.replicas: ''
          local.retention.bytes: '-2'
          local.retention.ms: '-2'
          max.compaction.lag.ms: '9223372036854775807'
          message.downconversion.enable: 'true'
          message.format.version: 3.0-IV1
          message.timestamp.after.max.ms: '9223372036854775807'
          message.timestamp.before.max.ms: '9223372036854775807'
          message.timestamp.difference.max.ms: '9223372036854775807'
          message.timestamp.type: CreateTime
          min.cleanable.dirty.ratio: '0.5'
          min.compaction.lag.ms: '0'
          min.insync.replicas: '2'
          preallocate: 'false'
          remote.storage.enable: 'false'
          segment.bytes: '104857600'
          segment.index.bytes: '10485760'
          segment.jitter.ms: '0'
          segment.ms: '604800000'
          unclean.leader.election.enable: 'false'
    x-messageCompatibility: BACKWARD
  streampay-balance-histories:
    address: streampay-balance-histories
    messages:
      StreampayBalanceHistories.message:
        $ref: '#/components/messages/StreampayBalancesMessage'
    description: <nil>
    bindings:
      kafka:
        bindingVersion: 0.4.0
        partitions: 1
        topicConfiguration:
          cleanup.policy:
            - delete
          retention.ms: 604800000
          retention.bytes: -1
          delete.retention.ms: 86400000
          max.message.bytes: 2097164
        x-configs:
          compression.type: producer
          file.delete.delay.ms: '60000'
          flush.messages: '9223372036854775807'
          flush.ms: '9223372036854775807'
          follower.replication.throttled.replicas: ''
          index.interval.bytes: '4096'
          leader.replication.throttled.replicas: ''
          local.retention.bytes: '-2'
          local.retention.ms: '-2'
          max.compaction.lag.ms: '9223372036854775807'
          message.downconversion.enable: 'true'
          message.format.version: 3.0-IV1
          message.timestamp.after.max.ms: '9223372036854775807'
          message.timestamp.before.max.ms: '9223372036854775807'
          message.timestamp.difference.max.ms: '9223372036854775807'
          message.timestamp.type: CreateTime
          min.cleanable.dirty.ratio: '0.5'
          min.compaction.lag.ms: '0'
          min.insync.replicas: '2'
          preallocate: 'false'
          remote.storage.enable: 'false'
          segment.bytes: '104857600'
          segment.index.bytes: '10485760'
          segment.jitter.ms: '0'
          segment.ms: '604800000'
          unclean.leader.election.enable: 'false'
    x-messageCompatibility: BACKWARD
  streampay-users:
    address: streampay-users
    messages:
      StreampayUsers.message:
        $ref: '#/components/messages/StreampayUsersMessage'
    description: <nil>
    bindings:
      kafka:
        bindingVersion: 0.4.0
        partitions: 1
        topicConfiguration:
          cleanup.policy:
            - compact
          retention.ms: 604800000
          retention.bytes: -1
          delete.retention.ms: 86400000
          max.message.bytes: 2097164
        x-configs:
          compression.type: producer
          file.delete.delay.ms: '60000'
          flush.messages: '9223372036854775807'
          flush.ms: '9223372036854775807'
          follower.replication.throttled.replicas: ''
          index.interval.bytes: '4096'
          leader.replication.throttled.replicas: ''
          local.retention.bytes: '-2'
          local.retention.ms: '-2'
          max.compaction.lag.ms: '9223372036854775807'
          message.downconversion.enable: 'true'
          message.format.version: 3.0-IV1
          message.timestamp.after.max.ms: '9223372036854775807'
          message.timestamp.before.max.ms: '9223372036854775807'
          message.timestamp.difference.max.ms: '9223372036854775807'
          message.timestamp.type: CreateTime
          min.cleanable.dirty.ratio: '0.5'
          min.compaction.lag.ms: '0'
          min.insync.replicas: '2'
          preallocate: 'false'
          remote.storage.enable: 'false'
          segment.bytes: '104857600'
          segment.index.bytes: '10485760'
          segment.jitter.ms: '0'
          segment.ms: '604800000'
          unclean.leader.election.enable: 'false'
    x-messageCompatibility: BACKWARD
operations:
  doStreampayCommands:
    action: send
    channel:
      $ref: '#/channels/streampay-commands'
    bindings:
      kafka:
        bindingVersion: 0.3.0
        groupId:
          type: string
        clientId:
          type: string
    messages:
      - $ref: '#/channels/streampay-commands/messages/StreampayCommands.message'
    reply:
      channel:
        $ref: '#/channels/streampay-replies'
  doStreampayBalanceHistories:
    action: send
    channel:
      $ref: '#/channels/streampay-balance-histories'
    bindings:
      kafka:
        bindingVersion: 0.3.0
        groupId:
          type: string
        clientId:
          type: string
    messages:
      - $ref: '#/channels/streampay-balance-histories/messages/StreampayBalanceHistories.message'
  onStreampayBalanceHistories:
    action: receive
    channel:
      $ref: '#/channels/streampay-balance-histories'
    bindings:
      kafka:
        bindingVersion: 0.3.0
        groupId:
          type: string
        clientId:
          type: string
    messages:
      - $ref: '#/channels/streampay-balance-histories/messages/StreampayBalanceHistories.message'
  doStreampayUsers:
    action: send
    channel:
      $ref: '#/channels/streampay-users'
    bindings:
      kafka:
        bindingVersion: 0.3.0
        groupId:
          type: string
        clientId:
          type: string
    messages:
      - $ref: '#/channels/streampay-users/messages/StreampayUsers.message'
  onStreampayUsers:
    action: receive
    channel:
      $ref: '#/channels/streampay-users'
    bindings:
      kafka:
        bindingVersion: 0.3.0
        groupId:
          type: string
        clientId:
          type: string
    messages:
      - $ref: '#/channels/streampay-users/messages/StreampayUsers.message'
components:
  messages:
    StreampayCommandsMessage:
      contentType: application/avro
      payload:
        schemaFormat: application/vnd.apache.avro;version=1.9.0
        schema:
          fields:
            - name: type
              type: string
            - name: userid
              type: string
            - name: requestid
              type: string
            - name: amount
              type: double
            - name: notes
              type: string
          name: PaymentCommand
          namespace: com.example
          type: record
      name: StreampayCommandsMessage
      bindings:
        kafka:
          bindingVersion: 0.3.0
          key:
            type: string
    StreampayRepliesMessage:
      contentType: application/avro
      payload:
        schemaFormat: application/vnd.apache.avro;version=1.9.0
        schema:
          fields:
            - name: status
              type: string
            - name: correlationid
              type: string
          name: Replies
          namespace: com.example
          type: record
      name: StreampayRepliesMessage
      bindings:
        kafka:
          bindingVersion: 0.3.0
          key:
            type: string
    StreampayBalancesMessage:
      contentType: application/avro
      payload:
        schemaFormat: application/vnd.apache.avro;version=1.9.0
        schema:
          fields:
            - name: balance
              type: double
            - name: timestamp
              type: long
          name: Balance
          namespace: com.example
          type: record
      name: StreampayBalancesMessage
      bindings:
        kafka:
          bindingVersion: 0.3.0
          key:
            type: string
    StreampayUsersMessage:
      contentType: application/avro
      payload:
        schemaFormat: application/vnd.apache.avro;version=1.9.0
        schema:
          fields:
            - name: id
              type: string
            - name: name
              type: string
            - name: username
              type: string
          name: User
          namespace: com.example
          type: record
      name: StreampayUsersMessage
      bindings:
        kafka:
          bindingVersion: 0.3.0
          key:
            type: string
  securitySchemes:
    confluentBroker:
      type: userPassword
      x-configs:
        sasl.mechanisms: PLAIN
        sasl.password: '{{CLUSTER_API_SECRET}}'
        sasl.username: '{{CLUSTER_API_KEY}}'
        security.protocol: sasl_ssl
    confluentSchemaRegistry:
      type: userPassword
      x-configs:
        basic.auth.user.info: '{{SCHEMA_REGISTRY_API_KEY}}:{{SCHEMA_REGISTRY_API_SECRET}}'
