---
name: zilla-taxi-tracking
bindings:

# REST endpoints
  north_rest_server:
    type: openapi
    kind: server
    options:
      specs:
        rest-tracking-spec: specs/tracking-openapi.yaml
    exit: north_rest_kafka_proxy
  north_rest_kafka_proxy:
    type: openapi-asyncapi
    kind: proxy
    options:
      specs:
        openapi:
          rest-tracking-spec: specs/tracking-openapi.yaml
        asyncapi:
          kafka-tracking-spec: specs/tracking-kafka-asyncapi.yaml
    routes:
      - when:
          - api-id: rest-tracking-spec
        exit: south_kafka_client
        with:
          api-id: kafka-tracking-spec

# MQTT endpoints
  mqtt_server:
    type: asyncapi
    kind: server
    options:
      specs:
        mqtt-tracking-spec: specs/tracking-mqtt-asyncapi.yaml
    exit: mqtt_kafka_proxy
    telemetry:
      metrics:
        - stream.*
  mqtt_kafka_proxy:
    type: asyncapi
    kind: proxy
    options:
      specs:
        mqtt-tracking-spec: specs/tracking-mqtt-asyncapi.yaml
        kafka-tracking-spec: specs/tracking-kafka-asyncapi.yaml
      mqtt-kafka:
        channels:
          sessions: mqttSessions
          retained: mqttRetained
          messages: mqttMessages
    routes:
      - when:
          - api-id: mqtt-tracking-spec
            operation-id: sendTaxiUpdate
        exit: south_kafka_client
        with:
          api-id: kafka-tracking-spec
          operation-id: sendTaxiUpdate
      - when:
          - api-id: mqtt-tracking-spec
            operation-id: sendBusUpdate
        exit: south_kafka_client
        with:
          api-id: kafka-tracking-spec
          operation-id: sendBusUpdate

# Connection to Kafka
  south_kafka_client:
    type: asyncapi
    kind: client
    options:
      specs:
        kafka-tracking-spec: specs/tracking-kafka-asyncapi.yaml
      kafka:
        sasl:
          mechanism: plain
          username: ${{env.KAFKA_USER}}
          password: ${{env.KAFKA_PASS}}
      tls:
        trustcacerts: true
        sni:
          - ${{env.KAFKA_BOOTSTRAP_HOST}}
    telemetry:
      metrics:
        - stream.*

telemetry:
  # Desired metrics to track
  metrics:
    - http.active.requests
    - http.duration
    - http.request.size
    - http.response.size
    - stream.active.received
    - stream.active.sent
    - stream.opens.received
    - stream.opens.sent
    - stream.data.received
    - stream.data.sent
    - stream.errors.received
    - stream.errors.sent
    - stream.closes.received
    - stream.closes.sent

  # Prometheus endpoint definition
  exporters:
    prometheus_metric_exporter:
      type: prometheus
      options:
        endpoints:
          - scheme: http
            path: /metrics
            port: 7190
