---
name: taxi-openapi-asyncapi
bindings:
  openapi_server:
    type: openapi
    kind: server
    options:
      specs:
        openapi-taxi-spec: taxi-openapi.yaml
    exit: openapi_asyncapi_proxy
  openapi_asyncapi_proxy:
    type: openapi-asyncapi
    kind: proxy
    options:
      specs:
        openapi:
          openapi-taxi-spec: taxi-openapi.yaml
        asyncapi:
          kafka-taxi-spec: taxi-kafka-asyncapi.yaml
    routes:
      - when:
          - api-id: openapi-taxi-spec
        exit: asyncapi_kafka
        with:
          api-id: kafka-taxi-spec

  asyncapi_mqtt:
    type: asyncapi
    kind: server
    options:
      specs:
        mqtt-taxi-spec: taxi-mqtt-asyncapi.yaml
    exit: asyncapi_proxy
    telemetry:
      metrics:
        - stream.*

  asyncapi_proxy:
    type: asyncapi
    kind: proxy
    options:
      specs:
        mqtt-taxi-spec: taxi-mqtt-asyncapi.yaml
        kafka-taxi-spec: taxi-kafka-asyncapi.yaml
      mqtt-kafka:
        clients:
          - bus/{identity}/#
          - taxi/{identity}/#
        channels:
          sessions: mqttSessions
          retained: mqttRetained
          messages: mqttMessages
    routes:
      - when:
          - api-id: mqtt-taxi-spec
            operation-id: sendTaxiUpdate
        exit: asyncapi_kafka
        with:
          api-id: kafka-taxi-spec
          operation-id: sendTaxiUpdate
      - when:
          - api-id: mqtt-taxi-spec
            operation-id: sendBusUpdate
        exit: asyncapi_kafka
        with:
          api-id: kafka-taxi-spec
          operation-id: sendBusUpdate

  asyncapi_kafka:
    type: asyncapi
    kind: client
    options:
      specs:
        kafka-taxi-spec: taxi-kafka-asyncapi.yaml
    telemetry:
      metrics:
        - stream.*

telemetry:
  # Desired metrics to track
  metrics:
    - http.active.requests
    - http.duration
    - http.request.size
    - http.response.size
    - stream.active.received
    - stream.active.sent
    - stream.opens.received
    - stream.opens.sent
    - stream.data.received
    - stream.data.sent
    - stream.errors.received
    - stream.errors.sent
    - stream.closes.received
    - stream.closes.sent

  # Prometheus endpoint definition
  exporters:
    prometheus_metric_exporter:
      type: prometheus
      options:
        endpoints:
          - scheme: http
            path: /metrics
            port: 7190
