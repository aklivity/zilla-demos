name: zilla-taxi-demo
bindings:

# Gateway ingress config
  tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port:
        - 7114
        - 7183
    routes:
        - when:
            - port: 7114
          exit: http_server
        - when:
            - port: 7183
          exit: mqtt_server
    telemetry:
      metrics:
        - stream.*
    exit: http_server
  http_server:
    type: http
    kind: server
    options:
      access-control:
        policy: cross-origin
    routes:
      - when:
          - headers:
              :scheme: http
              :authority: localhost:7114
              :path: /taxi/*
        exit: http_kafka_proxy
      - when:
          - headers:
              :scheme: http
              :authority: zilla:7114
        exit: grpc_server
    exit: http_kafka_proxy
    telemetry:
      metrics:
        - http.*

# HTTP proxy service to Kafka topics
  http_kafka_proxy:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: GET
            path: /bus/locations
        exit: kafka_cache_client
        with:
          capability: fetch
          topic: bus-locations
          merge:
            content-type: application/json
      - when:
          - method: GET
            path: /taxi/locations
        exit: kafka_cache_client
        with:
          capability: fetch
          topic: taxi-locations
          merge:
            content-type: application/json
      - when:
          - method: GET
            path: /taxi/locations/{id}
        exit: kafka_cache_client
        with:
          capability: fetch
          topic: taxi-locations
          filters:
            - key: ${params.id}

# gRPC service definition
  grpc_server:
    type: grpc
    kind: server
    options:
      services:
        - proto/taxi_route.proto
    exit: grpc_kafka
    telemetry:
      metrics:
        - grpc.*

# gRPC proxy service to Kafka topics
  grpc_kafka:
    type: grpc-kafka
    kind: proxy
    routes:
      - when:
          - method: taxiroute.TaxiRoute/*
        exit: kafka_cache_client
        with:
          capability: produce
          topic: route-requests
          acks: leader_only
          reply-to: route-replies

# gRPC Kafka fanout to a remote server
  taxi_route_remote_server:
    type: kafka-grpc
    kind: remote_server
    entry: kafka_cache_client
    options:
      acks: leader_only
    routes:
      - when:
          - topic: route-requests
            reply-to: route-replies
            method: taxiroute.TaxiRoute/*
        with:
          scheme: http
          authority: ${{env.TAXI_ROUTE_SERVER_HOST}}:${{env.TAXI_ROUTE_SERVER_PORT}}
        exit: taxi_route_server_grpc_client

# gRPC RoutGuide server
  taxi_route_server_grpc_client:
    type: grpc
    kind: client
    exit: taxi_route_server_http_client
  taxi_route_server_http_client:
    type: http
    kind: client
    options:
      versions:
        - h2
    exit: taxi_route_server_tcp_client
  taxi_route_server_tcp_client:
    type: tcp
    kind: client
    options:
      host: ${{env.TAXI_ROUTE_SERVER_HOST}}
      port: ${{env.TAXI_ROUTE_SERVER_PORT}}

# MQTT Server definition
  mqtt_server:
    type: mqtt
    kind: server
    exit: mqtt_kafka_proxy
    telemetry:
      metrics:
        - stream.*

# MQTT proxy service to Kafka topics
  mqtt_kafka_proxy:
    type: mqtt-kafka
    kind: proxy
    options:
      topics:
        sessions: mqtt-sessions
        messages: mqtt-messages
        retained: mqtt-retained
    clients:
      - bus/{identity}/#
      - taxi/{identity}/#
    routes:
      - when:
          - publish:
              - topic: bus/+/location
          - subscribe:
              - topic: bus/+/location
        with:
          messages: bus-locations
        exit: kafka_cache_client
      - when:
          - publish:
              - topic: taxi/+/location
          - subscribe:
              - topic: taxi/+/location
        with:
          messages: taxi-locations
        exit: kafka_cache_client
    exit: kafka_cache_client

# Kafka caching layer
  kafka_cache_client:
    type: kafka
    kind: cache_client
    exit: kafka_cache_server
  kafka_cache_server:
    type: kafka
    kind: cache_server
    options:
      bootstrap:
        - bus-locations
        - taxi-locations
        - mqtt-sessions
        - route-requests
        - route-replies
    exit: kafka_client

# Connect to local Kafka
  kafka_client:
    type: kafka
    kind: client
    exit: kafka_tcp_client
  kafka_tcp_client:
    type: tcp
    kind: client
    options:
      host: ${{env.KAFKA_HOST}}
      port: ${{env.KAFKA_PORT}}
    routes:
      - when:
          - cidr: 0.0.0.0/0

telemetry:
  # Desired metrics to track
  metrics:
    - grpc.active.requests
    - grpc.duration
    - grpc.request.size
    - grpc.response.size
    - grpc.requests.per.rpc
    - grpc.responses.per.rpc
    - http.active.requests
    - http.duration
    - http.request.size
    - http.response.size
    - stream.active.received
    - stream.active.sent
    - stream.opens.received
    - stream.opens.sent
    - stream.data.received
    - stream.data.sent
    - stream.errors.received
    - stream.errors.sent
    - stream.closes.received
    - stream.closes.sent

  # Prometheus endpoint definition
  exporters:
    prometheus_metric_exporter:
      type: prometheus
      options:
        endpoints:
          - scheme: http
            path: /metrics
            port: 7190
