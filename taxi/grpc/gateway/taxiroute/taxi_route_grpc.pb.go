// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: taxi_route.proto

package taxiroute

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaxiRoute_CreateTaxi_FullMethodName = "/taxiroute.TaxiRoute/CreateTaxi"
)

// TaxiRouteClient is the client API for TaxiRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaxiRouteClient interface {
	CreateTaxi(ctx context.Context, in *Route, opts ...grpc.CallOption) (*RouteResponse, error)
}

type taxiRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewTaxiRouteClient(cc grpc.ClientConnInterface) TaxiRouteClient {
	return &taxiRouteClient{cc}
}

func (c *taxiRouteClient) CreateTaxi(ctx context.Context, in *Route, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := c.cc.Invoke(ctx, TaxiRoute_CreateTaxi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxiRouteServer is the server API for TaxiRoute service.
// All implementations must embed UnimplementedTaxiRouteServer
// for forward compatibility
type TaxiRouteServer interface {
	CreateTaxi(context.Context, *Route) (*RouteResponse, error)
	mustEmbedUnimplementedTaxiRouteServer()
}

// UnimplementedTaxiRouteServer must be embedded to have forward compatible implementations.
type UnimplementedTaxiRouteServer struct {
}

func (UnimplementedTaxiRouteServer) CreateTaxi(context.Context, *Route) (*RouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaxi not implemented")
}
func (UnimplementedTaxiRouteServer) mustEmbedUnimplementedTaxiRouteServer() {}

// UnsafeTaxiRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaxiRouteServer will
// result in compilation errors.
type UnsafeTaxiRouteServer interface {
	mustEmbedUnimplementedTaxiRouteServer()
}

func RegisterTaxiRouteServer(s grpc.ServiceRegistrar, srv TaxiRouteServer) {
	s.RegisterService(&TaxiRoute_ServiceDesc, srv)
}

func _TaxiRoute_CreateTaxi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxiRouteServer).CreateTaxi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxiRoute_CreateTaxi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxiRouteServer).CreateTaxi(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

// TaxiRoute_ServiceDesc is the grpc.ServiceDesc for TaxiRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaxiRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taxiroute.TaxiRoute",
	HandlerType: (*TaxiRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTaxi",
			Handler:    _TaxiRoute_CreateTaxi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taxi_route.proto",
}
