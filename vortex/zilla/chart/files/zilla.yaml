name: example
vaults:
  server:
    type: filesystem
    options:
      keys:
        store: tls/localhost.p12
        type: pkcs12
        password: ${{env.KEYSTORE_PASSWORD}}
bindings:
  tcp_server0:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port: 9090
    exit: tls_server0
  tcp_server1:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port: 8080
    exit: http_server0
  tls_server0:
    type: tls
    kind: server
    vault: server
    options:
      keys:
        - localhost
      sni:
        - localhost
      alpn:
        - http/1.1
        - h2
    exit: http_server0
  http_server0:
    type: http
    kind: server
    routes:
      - when:
          - headers:
              ':scheme': https
              ':authority': localhost:9090
              content-type: application/grpc
        exit: grpc_server0
      - when:
          - headers:
              ':scheme': http
              ':authority': localhost:8080
              content-type: application/grpc
        exit: grpc_server0  
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
              :path: /sse_messages
          - headers:
              :scheme: https
              :authority: localhost:9090
              :path: /sse_messages
        exit: sse_server0  
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
              content-type: application/json
        exit: http_kafka_proxy0
  http_kafka_proxy0:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - path: /events
        exit: kafka_cache_client0
        with:
          capability: produce
          topic: http_messages
  grpc_server0:
    type: grpc
    kind: server
    options:
      services:
        - proto/demo.proto
    routes:
      - when:
          - method: example.DemoService/*
        exit: grpc_kafka0
  grpc_kafka0:
    type: grpc-kafka
    kind: proxy
    routes:
      - when:
          - method: example.DemoService/DemoUnary
        exit: kafka_cache_client0
        with:
          capability: produce
          topic: grpc_exchanges
          acks: leader_only
          reply-to: grpc_exchanges
      - when:
          - method: example.DemoService/DemoServerStream
        exit: kafka_cache_client0
        with:
          capability: fetch
          topic: grpc_messages   
  sse_server0:
    type: sse
    kind: server
    exit: sse_kafka_proxy0
  sse_kafka_proxy0:
    type: sse-kafka
    kind: proxy
    routes:
      - when:
          - path: /{topic}
        exit: kafka_cache_client0
        with:
          topic: ${params.topic}        
  kafka_cache_client0:
    type: kafka
    kind: cache_client
    exit: kafka_cache_server0
  kafka_cache_server0:
    type: kafka
    kind: cache_server
    exit: kafka_client0
  kafka_client0:
    type: kafka
    kind: client
    exit: tcp_client0
  tcp_client0:
    type: tcp
    kind: client
    options:
      host: kafka
      port: 29092
    routes:
      - when:
          - cidr: 0.0.0.0/0
