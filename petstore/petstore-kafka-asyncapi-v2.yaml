asyncapi: 3.0.0
info:
  title: Petstore Kafka API
  version: 2.0.0
  description: >
    This Petstore specification illustrates how Zilla can proxy synchronous and asynchronous
    REST APIs using AsyncAPI to document and generate them.
  license:
    name: Aklivity Community License
    url: https://github.com/aklivity/zilla/blob/main/LICENSE
  contact:
    name: Aklivity Community
    url: https://www.aklivity.io/slack
  externalDocs:
    description: Zilla Documentation
    url: https://docs.aklivity.io/
  tags:
    - name: pet
      description: Everything about your Pets
    - name: store
      description: Access to Petstore orders
    - name: customer
      description: Operations for a customer
defaultContentType: application/json
servers:
  production:
    host: pkc-p11xm.us-east-1.aws.confluent.cloud:9092
    protocol: kafka-secure
    description: Kafka PRODUCTION cluster
    security:
      - $ref: "#/components/securitySchemes/sasl-ssl"
  staging:
    host: staging.url:9092
    protocol: kafka-secure
    description: Kafka STAGING cluster for `uat` and `preprod` environments
    security:
      - $ref: "#/components/securitySchemes/sasl-ssl"
  dev:
    host: kafka:29092
    protocol: kafka
    description: Kafka DEV cluster for `dev` and `sit` environments
channels:
  pets:
    address: "petstore-pets"
    messages:
      pet:
        $ref: "#/components/messages/pet"
      empty:
        $ref: "#/components/messages/empty"
    description: The topic on which pet values may be produced and consumed.
  orders:
    address: "petstore-orders"
    messages:
      order:
        $ref: "#/components/messages/order"
      empty:
        $ref: "#/components/messages/empty"
    description: The topic on which pet values may be produced and consumed.
  customers:
    address: "petstore-customers"
    messages:
      customer:
        $ref: "#/components/messages/customer"
      empty:
        $ref: "#/components/messages/empty"
    description: The topic on which pet values may be produced and consumed.
  verifiedCustomers:
    address: "petstore-verified-customers"
    messages:
      customer:
        $ref: "#/components/messages/customer"
      empty:
        $ref: "#/components/messages/empty"
    description: The topic on which pet values may be produced and consumed.
operations:
  listPets:
    action: receive
    channel:
      $ref: "#/channels/pets"
    summary: >-
      List all pets.
    messages:
      - $ref: "#/channels/pets/messages/pet"
  addPet:
    action: send
    channel:
      $ref: "#/channels/pets"
    summary: >-
      Add a pet.
    messages:
      - $ref: "#/channels/pets/messages/pet"
  getPetById:
    action: receive
    channel:
      $ref: "#/channels/pets"
    summary: >-
      Get a pet.
    messages:
      - $ref: "#/channels/pets/messages/pet"
  updatePet:
    action: send
    channel:
      $ref: "#/channels/pets"
    summary: >-
      Update an existing pet by Id.
    messages:
      - $ref: "#/channels/pets/messages/pet"
  deletePet:
    action: send
    channel:
      $ref: "#/channels/pets"
    summary: >-
      Deletes a pet
    messages:
      - $ref: "#/channels/pets/messages/empty"
  createCustomer:
    action: send
    channel:
      $ref: "#/channels/customers"
    reply:
      address:
        location: '$message.header#/customer'
    summary: >-
      Add a pet.
    messages:
      - $ref: "#/channels/customers/messages/customer"
  getVerifiedCustomer:
    action: receive
    channel:
      $ref: "#/channels/customers"
    reply:
      address:
        location: '$message.header#/customer'
    summary: >-
      Get a pet.
    messages:
      - $ref: "#/channels/customers/messages/customer"
  verifyCustomer:
    action: send
    channel:
      $ref: "#/channels/verifiedCustomers"
    summary: >-
      Get a pet.
    messages:
      - $ref: "#/channels/customers/messages/customer"
  deleteCustomer:
    action: send
    channel:
      $ref: "#/channels/customers"
    summary: >-
      Deletes a pet
    messages:
      - $ref: "#/channels/customers/messages/empty"
  placeOrder:
    action: send
    channel:
      $ref: "#/channels/orders"
    summary: >-
      Add a pet.
    messages:
      - $ref: "#/channels/orders/messages/order"
  getOrderById:
    action: receive
    channel:
      $ref: "#/channels/orders"
    summary: >-
      Get a pet.
    messages:
      - $ref: "#/channels/orders/messages/order"
  deleteOrder:
    action: send
    channel:
      $ref: "#/channels/orders"
    summary: >-
      Deletes a pet
    messages:
      - $ref: "#/channels/orders/messages/empty"
components:
  correlationIds:
    customerVerifyCorrelationId:
      description: >
        This correlation ID is used for message tracing and messages
        correlation. This correlation ID is generated at runtime based on the
        `VERIFY_ID` and sent to the RESPONSE message.
      location: $message.header#/VERIFY_ID
  messages:
    empty:
      name: EmptyMessage
      payload:
        type: "null"
    pet:
      name: Pet
      title: Pet
      summary: Inform about Pet.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/Pet"
    pets:
      name: Pets
      title: Pets
      summary: A list of Pets.
      contentType: application/json
      payload:
        type: array
        items:
          $ref: "#/components/schemas/Pet"
    order:
      name: Order
      title: Order
      summary: Details for an Order.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/Order"
    customer:
      name: Customer
      title: Customer
      summary: Information about a Customer.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/Customer"
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        status:
          type: string
          description: Verification Status
          example: approved
          enum:
            - pending
            - approved
            - denied
        address:
          type: array
          items:
            $ref: "#/components/schemas/Address"
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
    Category:
      type: object
      properties:
        name:
          type: string
          example: Dogs
    Pet:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
  securitySchemes:
    sasl-ssl:
      type: plain
      x-sasl.jaas.config: >-
        org.apache.kafka.common.security.plain.PlainLoginModule required
        username="<CLUSTER_API_KEY>" password="<CLUSTER_API_SECRET>";
      x-security.protocol: SASL_SSL
      x-ssl.endpoint.identification.algorithm: https
      x-sasl.mechanism: PLAIN
      description: >
        Use [SASL authentication with SSL
        encryption](https://docs.confluent.io/platform/current/security/security_tutorial.html#configure-clients)
        to connect to the Broker.
