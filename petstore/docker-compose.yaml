version: "3"
services:
  zilla:
    image: ghcr.io/aklivity/zilla:develop-SNAPSHOT
    container_name: zilla
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "7114:7114"
    environment:
      KEYSTORE_PASSWORD: "generated"
      KAFKA_USER: "admin"
      KAFKA_PASS: "admin"
      PETSTORE_VERSION: "v1"
    volumes:
      - ./zilla.yaml:/etc/zilla/zilla.yaml
      - ./tls/localhost.p12:/etc/zilla/localhost.p12
      - ./petstore-openapi.yaml:/etc/zilla/specs/petstore-openapi.yaml
      - ./petstore-kafka-asyncapi.yaml:/etc/zilla/specs/petstore-kafka-asyncapi.yaml
    command: start -v -e -Pzilla.engine.verbose.composites -w 1

  apicurio:
    image: apicurio/apicurio-registry-mem:2.5.10.Final
    container_name: apicurio
    ports:
      - "8081:8081"
    environment:
      CORS_ALLOWED_ORIGINS: "*"
      QUARKUS_HTTP_PORT: 8081
      LOG_LEVEL: "DEBUG"
  init-apicurio:
    image: curlimages/curl
    deploy:
      restart_policy:
        condition: none
        max_attempts: 0
    depends_on:
      - apicurio
    volumes:
      - ./petstore-openapi-v2.yaml:/petstore-openapi.yaml
      - ./petstore-kafka-asyncapi-v2.yaml:/petstore-kafka-asyncapi.yaml
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo -e "blocks until apicurio is reachable";
        wget --no-check-certificate -qO- https://raw.githubusercontent.com/eficode/wait-for/v2.2.3/wait-for | sh -s -- apicurio:8081 --timeout=60 -- echo -e "apicurio ready";
        echo -e "publish OPENAPI";
        curl -X POST -H "Content-Type: application/json; artifactType=OPENAPI" \
          -H "X-Registry-ArtifactId: petstore-openapi" -H "X-Registry-Version: v1" \
          --data-binary "@/petstore-openapi.yaml" http://apicurio:8081/apis/registry/v2/groups/petstore/artifacts;
        echo -e "publish ASYNCAPI";
        curl -X POST -H "Content-Type: application/json; artifactType=ASYNCAPI" \
          -H "X-Registry-ArtifactId: petstore-asyncapi" -H "X-Registry-Version: v1" \
          --data-binary "@/petstore-kafka-asyncapi.yaml" http://apicurio:8081/apis/registry/v2/groups/petstore/artifacts;

  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:9092"
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_BROKER_ID: "1"
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@127.0.0.1:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CLIENT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LOG_DIRS: "/tmp/logs"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_LISTENERS: "CLIENT://:9092,INTERNAL://:29092,CONTROLLER://:9093"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CFG_ADVERTISED_LISTENERS: "CLIENT://localhost:9092,INTERNAL://kafka:29092"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"

  init-kafka:
    image: bitnami/kafka
    deploy:
      restart_policy:
        condition: none
        max_attempts: 0
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo -e "blocks until kafka is reachable";
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list;
        echo -e "Creating kafka topic";
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic petstore --config cleanup.policy=compact;
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic petstore-pets --config cleanup.policy=compact;
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic petstore-orders --config cleanup.policy=compact;
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic petstore-customers --config cleanup.policy=compact;
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic petstore-verified-customers --config cleanup.policy=compact;
        echo -e "Successfully created the following topics:";
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list;

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "localhost"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:29092"

networks:
  default:
    name: zilla-petstore-network
    driver: bridge
