#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

asyncapi: 3.0.0
info:
  title: Petstore Kafka API
  version: 1.0.0
defaultContentType: application/json
servers:
  cc-sasl:
    host: pkc-p11xm.us-east-1.aws.confluent.cloud:9092
    protocol: kafka-secure
    description: Local broker
channels:
  petstore:
    address: 'petstore'
    messages:
      pet:
        $ref: '#/components/messages/pet'
      empty:
        $ref: '#/components/messages/pet'
    description: The topic on which pet values may be produced and consumed.
operations:
  listPets:
    action: receive
    channel:
      $ref: '#/channels/petstore'
    summary: >-
      List all pets.
    traits:
      - $ref: '#/components/operationTraits/kafka'
    messages:
      - $ref: '#/channels/petstore/messages/pet'
  addPet:
    action: send
    channel:
      $ref: '#/channels/petstore'
    summary: >-
      Add a pet.
    traits:
      - $ref: '#/components/operationTraits/kafka'
    messages:
      - $ref: '#/channels/petstore/messages/pet'
  getPet:
    action: receive
    channel:
      $ref: '#/channels/petstore'
    summary: >-
      Get a pet.
    traits:
      - $ref: '#/components/operationTraits/kafka'
    messages:
      - $ref: '#/channels/petstore/messages/pet'
  updatePet:
    action: send
    channel:
      $ref: '#/channels/petstore'
    summary: >-
       Update an existing pet by Id.
    traits:
      - $ref: '#/components/operationTraits/kafka'
    messages:
      - $ref: '#/channels/petstore/messages/pet'
  deletePet:
    action: send
    channel:
      $ref: '#/channels/petstore'
    summary: >-
      Deletes a pet
    traits:
      - $ref: '#/components/operationTraits/kafka'
    messages:
      - $ref: '#/channels/petstore/messages/nullPet'
components:
  messages:
    nullPet:
      name: NullPet
      payload:
        type: "null"
    pet:
      name: Pet
      title: Pet
      summary: >-
        Inform about Pet.
      contentType: application/json
      traits:
        - $ref: '#/components/messageTraits/commonHeaders'
      payload:
        $ref: '#/components/schemas/petPayload'
    pets:
      name: Pets
      title: Pets
      summary: >-
        Inform about Pets.
      contentType: application/json
      traits:
        - $ref: '#/components/messageTraits/commonHeaders'
      payload:
        $ref: '#/components/schemas/petsPayload'
  schemas:
    petPayload:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          description: Pet id.
        name:
          type: string
          description: Pet name.
        tag:
          type: string
          description: Tag.
    petsPayload:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/Pet"
  messageTraits:
    commonHeaders:
      headers:
        type: object
        properties:
          my-app-header:
            type: integer
            minimum: 0
            maximum: 100
  operationTraits:
    kafka:
      bindings:
        kafka:
          clientId:
            type: string
            enum:
              - my-app-id
