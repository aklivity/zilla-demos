openapi: 3.0.2
info:
  title: Zilla Petstore REST API
  version: 2.0.0
  description: >
    This Petstore specification illustrates how Zilla can proxy synchronous and asynchronous
    REST APIs using an OpenAPI 3.0 spec to document and generate the API endpoints.
  license:
    name: Aklivity Community License
    url: https://github.com/aklivity/zilla/blob/main/LICENSE
  contact:
    name: Aklivity Community
    url: https://www.aklivity.io/slack
externalDocs:
  description: Demo Repo
  url: https://github.com/aklivity/zilla-demos/tree/main/petstore#readme
servers:
  - url: https://petstore.aklivity.io
    description: Zilla Petstore REST API server for the prod environment
  - url: http://localhost:7114
    description: Zilla Petstore REST API server for the dev environment
tags:
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Access to Petstore orders
  - name: customer
    description: Operations for a customer
paths:
  /pet:
    get:
      tags:
        - pet
      summary: All Pets
      description: Fetch all of the Pets
      operationId: listPets
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid output value
      security:
        - petstore_auth:
            - "read:all"
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "204":
          description: Successful operation
        "400":
          description: Invalid input
      security:
        - petstore_auth:
            - write:all
  /pet/{petKey}:
    get:
      tags:
        - pet
      summary: Find pet by Message Key
      description: Returns a single pet
      operationId: getPet
      parameters:
        - name: petKey
          in: path
          description: Message Key of pet to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid Message Key supplied
        "404":
          description: Pet not found
      security:
        - petstore_auth:
            - read:all
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      parameters:
        - name: petKey
          in: path
          description: Message Key of pet to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "204":
          description: Successful operation
        "400":
          description: Invalid input
        "404":
          description: Pet not found
      security:
        - petstore_auth:
            - write:all
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ""
      operationId: deletePet
      parameters:
        - name: petKey
          in: path
          description: Message Key of Pet to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:all
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "204":
          description: Successful operation
        "400":
          description: Invalid input
      security:
        - petstore_auth:
            - write:all
  /store/order/{orderKey}:
    get:
      tags:
        - store
      summary: Find purchase order by Message Key
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions.
      operationId: getOrder
      parameters:
        - name: orderKey
          in: path
          description: Message Key of order that needs to be fetched
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid Message Key supplied
        "404":
          description: Order not found
      security:
        - petstore_auth:
            - read:all
    delete:
      tags:
        - store
      summary: Delete purchase order by Message Key
      description: ""
      operationId: deleteOrder
      parameters:
        - name: orderKey
          in: path
          description: Message Key of the order that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "400":
          description: Invalid Message Key supplied
        "404":
          description: Order not found
      security:
        - petstore_auth:
            - write:all
  /customer:
    post:
      tags:
        - customer
      summary: Create unverified customer
      description: Create a new customer and start a verification process
      operationId: createCustomer
      parameters:
        - in: header
          name: Prefer
          required: true
          schema:
            type: string
            enum:
              - respond-async
      requestBody:
        description: Created customer object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "202":
          description: Successful operation
          headers:
            Location:
              schema:
                type: string
                format: /customer;cid={correlationId}
              description: Customer verification result location URL
      security:
        - petstore_auth:
            - write:all
  /customer;cid={correlationId}:
    get:
      tags:
        - customer
      summary: Verify customer details
      description: Fetch and wait the verification status change
      operationId: getVerifiedCustomer
      parameters:
        - name: correlationId
          in: path
          description: Correlation ID of the verification request
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: Prefer
          schema:
            type: string
            pattern: '^wait=\d+$'
      responses:
        "200":
          description: Successful operation; correlated message exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "202":
          description: Successful operation; no correlated message exists
          headers:
            Location:
              schema:
                type: string
                format: /customer;cid={correlationId}
              description: Customer verification result location URL
      security:
        - petstore_auth:
            - read:all
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petKey:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        status:
          type: string
          description: Verification Status
          example: approved
          enum:
            - pending
            - approved
            - denied
        address:
          type: array
          items:
            $ref: "#/components/schemas/Address"
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
    Category:
      type: object
      properties:
        name:
          type: string
          example: Dogs
    Pet:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
  securitySchemes:
    petstore_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
