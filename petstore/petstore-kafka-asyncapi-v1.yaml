asyncapi: 3.0.0
info:
  title: Petstore Kafka v1
  description: This is a sample Petstore Server.
  version: 1.0.0
  license:
    name: Aklivity Community License
    url: https://github.com/aklivity/zilla/blob/main/LICENSE
  contact:
    name: Aklivity Community
    url: https://www.aklivity.io/slack
  externalDocs:
    description: Demo Repo
    url: https://github.com/aklivity/zilla-demos/tree/main/petstore#readme
defaultContentType: application/json
servers:
  local-dev:
    host: kafka:29092
    protocol: kafka
    description: local bitnami/kafka
channels:
  petstore:
    address: "petstore"
    messages:
      pet:
        $ref: "#/components/messages/pet"
      empty:
        $ref: "#/components/messages/nullPet"
    description: The topic on which pet values may be produced and consumed.
operations:
  listPets:
    action: receive
    channel:
      $ref: "#/channels/petstore"
    summary: >-
      List all pets.
    traits:
      - $ref: "#/components/operationTraits/kafka"
    messages:
      - $ref: "#/channels/petstore/messages/pet"
  addPet:
    action: send
    channel:
      $ref: "#/channels/petstore"
    summary: >-
      Add a pet.
    traits:
      - $ref: "#/components/operationTraits/kafka"
    messages:
      - $ref: "#/channels/petstore/messages/pet"
  getPet:
    action: receive
    channel:
      $ref: "#/channels/petstore"
    summary: >-
      Get a pet.
    traits:
      - $ref: "#/components/operationTraits/kafka"
    messages:
      - $ref: "#/channels/petstore/messages/pet"
  updatePet:
    action: send
    channel:
      $ref: "#/channels/petstore"
    summary: >-
      Update an existing pet by Id.
    traits:
      - $ref: "#/components/operationTraits/kafka"
    messages:
      - $ref: "#/channels/petstore/messages/pet"
  deletePet:
    action: send
    channel:
      $ref: "#/channels/petstore"
    summary: >-
      Deletes a pet
    traits:
      - $ref: "#/components/operationTraits/kafka"
    messages:
      - $ref: "#/channels/petstore/messages/empty"
components:
  messages:
    nullPet:
      name: NullPet
      payload:
        type: "null"
    pet:
      name: Pet
      title: Pet
      summary: >-
        Inform about Pet.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/commonHeaders"
      payload:
        $ref: "#/components/schemas/petPayload"
    pets:
      name: Pets
      title: Pets
      summary: >-
        Inform about Pets.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/commonHeaders"
      payload:
        $ref: "#/components/schemas/petsPayload"
  schemas:
    petPayload:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          description: Pet id.
        name:
          type: string
          description: Pet name.
        tag:
          type: string
          description: Tag.
    petsPayload:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/petPayload"
  messageTraits:
    commonHeaders:
      headers:
        type: object
        properties:
          my-app-header:
            type: integer
            minimum: 0
            maximum: 100
  operationTraits:
    kafka:
      bindings:
        kafka:
          clientId:
            type: string
            enum:
              - my-app-id
