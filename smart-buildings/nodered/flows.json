[
    {
        "id": "7f0d673780f6df9b",
        "type": "tab",
        "label": "Building 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2b3ad0efc0c9de04",
        "type": "tab",
        "label": "Building 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9b807f6e931072d0",
        "type": "group",
        "z": "7f0d673780f6df9b",
        "name": "Emulated device : Device1",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "8bafb5ca9319f25b",
            "171d0d3ab6cf4b60"
        ],
        "x": 8,
        "y": 613,
        "w": 1154,
        "h": 594
    },
    {
        "id": "7e7e4e2f016331ed",
        "type": "group",
        "z": "7f0d673780f6df9b",
        "name": "Emulated Edge of Network (EoN) Node",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "6da3b79df35d0a20",
            "3e99cfcda113d95f"
        ],
        "x": 18,
        "y": 13,
        "w": 1154,
        "h": 574
    },
    {
        "id": "c84fc3a7b7bf4fc2",
        "type": "group",
        "z": "7f0d673780f6df9b",
        "name": "Emulated device : Device2",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "417ec37e5915bdc6",
            "9745e11ad525fcea"
        ],
        "x": 8,
        "y": 1213,
        "w": 1154,
        "h": 594
    },
    {
        "id": "5128dd489ead7eac",
        "type": "group",
        "z": "2b3ad0efc0c9de04",
        "name": "Emulated device : Device1",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "20b68a47c776eebe",
            "31816bb2c3870f72"
        ],
        "x": 18,
        "y": 613,
        "w": 1154,
        "h": 594
    },
    {
        "id": "ab28c17601baca41",
        "type": "group",
        "z": "2b3ad0efc0c9de04",
        "name": "Emulated Edge of Network (EoN) Node",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "3aec62b303b86ab9",
            "244f5490830221f1"
        ],
        "x": 18,
        "y": 13,
        "w": 1164,
        "h": 574
    },
    {
        "id": "ace2eb58d34c7ba9",
        "type": "group",
        "z": "2b3ad0efc0c9de04",
        "name": "Emulated device : Device2",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "bac4adefc1db22cc",
            "f6a3536813d66c1b"
        ],
        "x": 18,
        "y": 1213,
        "w": 1154,
        "h": 594
    },
    {
        "id": "8bafb5ca9319f25b",
        "type": "group",
        "z": "7f0d673780f6df9b",
        "g": "9b807f6e931072d0",
        "name": "Device1 / DDATA, DBIRTH and DDEATH",
        "style": {
            "stroke": "#92d04f",
            "fill": "#c8e7a7",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "221bc4458002b147",
            "3caeb246dbc855f3",
            "8f363dbc436bd70f",
            "73ec50f74e0d636c",
            "8ef2c3f9c8aa5308",
            "221bc4458002b147",
            "9f15bdb21d0ea917",
            "b76c4f18d6f407e8",
            "746110e5b3a3049b",
            "49972b90e6d5c71e"
        ],
        "x": 44,
        "y": 639,
        "w": 1082,
        "h": 182
    },
    {
        "id": "6da3b79df35d0a20",
        "type": "group",
        "z": "7f0d673780f6df9b",
        "g": "7e7e4e2f016331ed",
        "name": "Emulated EoN Node / Building1",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "0ab0ee6e2579314c",
            "fa6d4c2c5bc35c03",
            "4a6aaf3d4f44d6a4",
            "9331974a2fea03b9",
            "55003e6861ed9ad7",
            "f734af8d7efff40b",
            "39ae10cb66f44d42",
            "fd7a0ea1a81378a5",
            "ba2747c23a62e368"
        ],
        "x": 44,
        "y": 39,
        "w": 1102,
        "h": 182
    },
    {
        "id": "3e99cfcda113d95f",
        "type": "group",
        "z": "7f0d673780f6df9b",
        "g": "7e7e4e2f016331ed",
        "name": "Emulated EoN Node / control commands",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "120fdafd997454cf",
            "6e35a2590aea5a9a",
            "2b01e46f5ebab31c",
            "6b942c05965b144e",
            "f6d5c8f5739d81a4",
            "1127a23de2dbeebc",
            "b9e3065d9cf5cb8f",
            "2179ed2c4bbf132e",
            "c6d0d0a298dc27e6",
            "91a7ebe172acc756",
            "82af7c90ab0f343e",
            "5e4cb0e20593603c",
            "7cc49efdf0cfd895"
        ],
        "x": 44,
        "y": 239,
        "w": 1102,
        "h": 322
    },
    {
        "id": "171d0d3ab6cf4b60",
        "type": "group",
        "z": "7f0d673780f6df9b",
        "g": "9b807f6e931072d0",
        "name": "Device1 / control commands",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "8a55638e1b3940d2",
            "551599bd68c97175",
            "99aaa7d2f3fe6b24",
            "ce9f35abd4f50dc3",
            "3d3890956cc55536",
            "ebbdeb160a483119",
            "3f6f1f5c976723cf",
            "02784c3d9970e9ff",
            "7c68c9335bc0eba8",
            "a0dd75559cbab257",
            "bccf6e86df3779e4",
            "ec4597b415098143",
            "422f8f9f2d2c4009"
        ],
        "x": 34,
        "y": 859,
        "w": 1102,
        "h": 322
    },
    {
        "id": "417ec37e5915bdc6",
        "type": "group",
        "z": "7f0d673780f6df9b",
        "g": "c84fc3a7b7bf4fc2",
        "name": "Device2 / DDATA, DBIRTH and DDEATH",
        "style": {
            "stroke": "#92d04f",
            "fill": "#c8e7a7",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "2a086d8c2cb1c6ed",
            "d46323e97945a666",
            "fdaae2dbc3801c07",
            "d3b2b93ecfcc178a",
            "61cccae98438e312",
            "2a086d8c2cb1c6ed",
            "82f7fe20016a3a92",
            "fb97c83db3c60cd1",
            "c1e84663db1dec8e",
            "33cf8389453d7303"
        ],
        "x": 44,
        "y": 1239,
        "w": 1082,
        "h": 182
    },
    {
        "id": "9745e11ad525fcea",
        "type": "group",
        "z": "7f0d673780f6df9b",
        "g": "c84fc3a7b7bf4fc2",
        "name": "Device2 / control commands",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "4793a917b9e21984",
            "1559d5b083f231a5",
            "2bbc63114cbc9a91",
            "2769efccf055206e",
            "994e1c7fe2a8488f",
            "3fa0850b68f2328e",
            "0f445547a709d54a",
            "2c208663d771ab43",
            "b3bc1b4787f6bd8d",
            "b57317f239364730",
            "f08fb4622c506982",
            "193b26078302fdc0",
            "beb151997b41667b"
        ],
        "x": 34,
        "y": 1459,
        "w": 1102,
        "h": 322
    },
    {
        "id": "20b68a47c776eebe",
        "type": "group",
        "z": "2b3ad0efc0c9de04",
        "g": "5128dd489ead7eac",
        "name": "Device1 / DDATA, DBIRTH and DDEATH",
        "style": {
            "stroke": "#92d04f",
            "fill": "#c8e7a7",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "cd70e6e010e9fafb",
            "abd42134628615d8",
            "92ca171020c6d159",
            "7dfa8e4dfeb69857",
            "ddf4f644a4443dbe",
            "cd70e6e010e9fafb",
            "b23dc5a3799b905f",
            "548597b079b5aaf4",
            "32f63145989837fa",
            "91ce81a7ff4d52f0"
        ],
        "x": 54,
        "y": 639,
        "w": 1082,
        "h": 182
    },
    {
        "id": "31816bb2c3870f72",
        "type": "group",
        "z": "2b3ad0efc0c9de04",
        "g": "5128dd489ead7eac",
        "name": "Device1 / control commands",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "df2d5280ae0fb598",
            "c0ad3c25f05c2fbe",
            "f34c90459a133522",
            "21bbf46e154ab08f",
            "d4c813cff0b3827d",
            "737ab5202fc2bb22",
            "94c0cdcacebca5a9",
            "9dbf3de831e4b7dc",
            "0e0efea877e73e10",
            "2dd989669e9b922a",
            "ad7f65a720ec1ba8",
            "91741ca912b769c7",
            "40b2494b80d59115"
        ],
        "x": 44,
        "y": 859,
        "w": 1102,
        "h": 322
    },
    {
        "id": "3aec62b303b86ab9",
        "type": "group",
        "z": "2b3ad0efc0c9de04",
        "g": "ab28c17601baca41",
        "name": "Emulated EoN Node / Building2",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "2e728a148feca51f",
            "4a492193a89d7ae6",
            "fd319b82678659d2",
            "034fcab56b9edee1",
            "b324b29d5796b2b1",
            "20117163211756e3",
            "92678d330abe090a",
            "352c791d8c0e4d69",
            "2f61ff79e5fb01d0"
        ],
        "x": 54,
        "y": 39,
        "w": 1102,
        "h": 182
    },
    {
        "id": "244f5490830221f1",
        "type": "group",
        "z": "2b3ad0efc0c9de04",
        "g": "ab28c17601baca41",
        "name": "Emulated EoN Node / control commands",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "0d625e86edada3f5",
            "c559ccd57d877dcd",
            "ecd31ded4c37b860",
            "7f93069de9127763",
            "b5643cab47fc1504",
            "25c6b77e96e64c06",
            "8aa3d900e29f1924",
            "c80a72d607ab6666",
            "cbbb339ca14fbe45",
            "9e5ac2690e575360",
            "8a9118dab5aeaea1",
            "6d22026577415938",
            "92d69c33872b032c"
        ],
        "x": 44,
        "y": 239,
        "w": 1102,
        "h": 322
    },
    {
        "id": "bac4adefc1db22cc",
        "type": "group",
        "z": "2b3ad0efc0c9de04",
        "g": "ace2eb58d34c7ba9",
        "name": "Device2 / DDATA, DBIRTH and DDEATH",
        "style": {
            "stroke": "#92d04f",
            "fill": "#c8e7a7",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "05eaed14970d561c",
            "8c52124fa6b299ee",
            "e78af3b44217bec7",
            "530ccf3171ca22b4",
            "d44eb987962e1f9f",
            "05eaed14970d561c",
            "7b8301777e8fd10b",
            "3ead494d37ab3440",
            "5281945513309ad1",
            "469e67b9775ff53e"
        ],
        "x": 54,
        "y": 1239,
        "w": 1082,
        "h": 182
    },
    {
        "id": "f6a3536813d66c1b",
        "type": "group",
        "z": "2b3ad0efc0c9de04",
        "g": "ace2eb58d34c7ba9",
        "name": "Device2 / control commands",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "n",
            "color": "#3f3f3f"
        },
        "nodes": [
            "fdde9dd34d45f719",
            "075fba145cf00ea2",
            "ea706d145650fd5a",
            "979ea2d7c55ad607",
            "d592e10918830efa",
            "01ab47e67cb8cc52",
            "51f586ca63f91c7f",
            "1fcfc93057cb9005",
            "e8909f286a356862",
            "47d2c343452293dd",
            "1358b5250e5b6c6d",
            "44a761d1858c7761",
            "0333b5f36fdb40d4"
        ],
        "x": 44,
        "y": 1459,
        "w": 1102,
        "h": 322
    },
    {
        "id": "e55b485152c29769",
        "type": "mqtt-broker",
        "name": "EMQX",
        "broker": "tcp://mqtt:1883",
        "port": "1883",
        "clientid": "IoTSesnsorsSpB-NodeRedClient",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "10",
        "cleansession": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": "120"
    },
    {
        "id": "33ba13cd985b8439",
        "type": "protobuf-file",
        "protopath": "/data/sparkplug_b.proto"
    },
    {
        "id": "c7e4ea28fcb99a3c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "3caeb246dbc855f3",
        "type": "mqtt in",
        "z": "7f0d673780f6df9b",
        "g": "8bafb5ca9319f25b",
        "name": "Encoded DDATA/Devices",
        "topic": "spBv1.0/SmartBuildings/DDATA/Building1/Device1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 680,
        "wires": [
            [
                "221bc4458002b147"
            ]
        ]
    },
    {
        "id": "8f363dbc436bd70f",
        "type": "debug",
        "z": "7f0d673780f6df9b",
        "g": "8bafb5ca9319f25b",
        "name": "Decoded Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 680,
        "wires": []
    },
    {
        "id": "fa6d4c2c5bc35c03",
        "type": "mqtt in",
        "z": "7f0d673780f6df9b",
        "g": "6da3b79df35d0a20",
        "name": "Encoded NBIRTH/EoN-Node",
        "topic": "spBv1.0/SmartBuildings/NBIRTH/Building1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "0ab0ee6e2579314c"
            ]
        ]
    },
    {
        "id": "4a6aaf3d4f44d6a4",
        "type": "debug",
        "z": "7f0d673780f6df9b",
        "g": "6da3b79df35d0a20",
        "name": "Decoded Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 80,
        "wires": []
    },
    {
        "id": "120fdafd997454cf",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Send Rebirth command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "1127a23de2dbeebc"
            ]
        ]
    },
    {
        "id": "2b01e46f5ebab31c",
        "type": "debug",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Encoded Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 380,
        "wires": []
    },
    {
        "id": "6b942c05965b144e",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Reboot",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Node Control/Reboot\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 400,
        "wires": [
            [
                "6e35a2590aea5a9a"
            ]
        ]
    },
    {
        "id": "f6d5c8f5739d81a4",
        "type": "mqtt out",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "EoN Node control topic",
        "topic": "spBv1.0/SmartBuildings/NCMD/Building1",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e55b485152c29769",
        "x": 1010,
        "y": 420,
        "wires": []
    },
    {
        "id": "1127a23de2dbeebc",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Rebirth",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Node Control/Rebirth\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "6e35a2590aea5a9a"
            ]
        ]
    },
    {
        "id": "b9e3065d9cf5cb8f",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Shutdown",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Node Control/Shutdown\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 340,
        "wires": [
            [
                "6e35a2590aea5a9a"
            ]
        ]
    },
    {
        "id": "2179ed2c4bbf132e",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Send Shutdown command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 340,
        "wires": [
            [
                "b9e3065d9cf5cb8f"
            ]
        ]
    },
    {
        "id": "c6d0d0a298dc27e6",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Send Reboot command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "6b942c05965b144e"
            ]
        ]
    },
    {
        "id": "91a7ebe172acc756",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Remove Device",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"DeviceId\",\n                \"stringValue\": \"Device1-spB\"\n            }\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Node Control/RemoveDevice\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 460,
        "wires": [
            [
                "6e35a2590aea5a9a"
            ]
        ]
    },
    {
        "id": "82af7c90ab0f343e",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Send RemoveDevice command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "91a7ebe172acc756"
            ]
        ]
    },
    {
        "id": "5e4cb0e20593603c",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Add Device",
        "func": "msg.payload = {\n    \"version\": \"v1.0.0\",\n    \"isDefinition\": true,\n    \"parameters\": [\n        {\n            \"name\": \"DeviceId\",\n            \"stringValue\": \"Device1-spB\"\n        },\n        {\n            \"name\": \"StoreAndForward\",\n            \"booleanValue\": true\n        },\n        {\n            \"name\": \"TTL\",\n            \"intValue\": 10\n        }\n        \n    ],\n    \"metrics\": [\n        {\n            \"name\": \"Node Control/AddDevice\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 520,
        "wires": [
            [
                "6e35a2590aea5a9a"
            ]
        ]
    },
    {
        "id": "7cc49efdf0cfd895",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Send AddDevice command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 520,
        "wires": [
            [
                "5e4cb0e20593603c"
            ]
        ]
    },
    {
        "id": "9331974a2fea03b9",
        "type": "mqtt in",
        "z": "7f0d673780f6df9b",
        "g": "6da3b79df35d0a20",
        "name": "Encoded NDEATH/EoN-Node",
        "topic": "spBv1.0/SmartBuildings/NDEATH/Building1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "0ab0ee6e2579314c"
            ]
        ]
    },
    {
        "id": "55003e6861ed9ad7",
        "type": "mqtt in",
        "z": "7f0d673780f6df9b",
        "g": "6da3b79df35d0a20",
        "name": "Encoded NDATA/EoN-Node",
        "topic": "spBv1.0/SmartBuildings/NDATA/Building1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 160,
        "wires": [
            [
                "0ab0ee6e2579314c"
            ]
        ]
    },
    {
        "id": "73ec50f74e0d636c",
        "type": "mqtt in",
        "z": "7f0d673780f6df9b",
        "g": "8bafb5ca9319f25b",
        "name": "Encoded DBIRTH/Devices",
        "topic": "spBv1.0/SmartBuildings/DBIRTH/Building1/Device1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 720,
        "wires": [
            [
                "221bc4458002b147"
            ]
        ]
    },
    {
        "id": "8ef2c3f9c8aa5308",
        "type": "mqtt in",
        "z": "7f0d673780f6df9b",
        "g": "8bafb5ca9319f25b",
        "name": "Encoded DDEATH/Devices",
        "topic": "spBv1.0/SmartBuildings/DDEATH/Building1/Device1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 760,
        "wires": [
            [
                "221bc4458002b147"
            ]
        ]
    },
    {
        "id": "37ac5ea08930317d",
        "type": "comment",
        "z": "7f0d673780f6df9b",
        "name": "SmartBuildings-Building1",
        "info": "This flow contains all the defined commands\nto control the EoN Node and all the devices\nassociated with it.",
        "x": 1840,
        "y": 40,
        "wires": []
    },
    {
        "id": "6e35a2590aea5a9a",
        "type": "encode",
        "z": "7f0d673780f6df9b",
        "g": "3e99cfcda113d95f",
        "name": "Building1 encoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Template",
        "x": 760,
        "y": 400,
        "wires": [
            [
                "2b01e46f5ebab31c",
                "f6d5c8f5739d81a4"
            ]
        ]
    },
    {
        "id": "221bc4458002b147",
        "type": "decode",
        "z": "7f0d673780f6df9b",
        "g": "8bafb5ca9319f25b",
        "name": "Building1 dencoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Payload",
        "x": 470,
        "y": 720,
        "wires": [
            [
                "8f363dbc436bd70f",
                "9f15bdb21d0ea917"
            ]
        ]
    },
    {
        "id": "0ab0ee6e2579314c",
        "type": "decode",
        "z": "7f0d673780f6df9b",
        "g": "6da3b79df35d0a20",
        "name": "Building1 dencoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Payload",
        "x": 490,
        "y": 120,
        "wires": [
            [
                "4a6aaf3d4f44d6a4",
                "ba2747c23a62e368"
            ]
        ]
    },
    {
        "id": "8a55638e1b3940d2",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Send Rebirth command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 960,
        "wires": [
            [
                "3d3890956cc55536"
            ]
        ]
    },
    {
        "id": "551599bd68c97175",
        "type": "debug",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Encoded Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1000,
        "wires": []
    },
    {
        "id": "99aaa7d2f3fe6b24",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Add Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"NewSensor\"\n            },\n            {\n                \"name\": \"Mean\",\n                \"doubleValue\": 18.5\n            },\n            {\n                \"name\": \"Std\",\n                \"doubleValue\": 1.8\n            },\n            {\n                \"name\": \"DelayMin\",\n                \"intValue\": 5\n            },\n            {\n                \"name\": \"DelayMax\",\n                \"intValue\": 8\n            },\n            {\n                \"name\": \"Randomize\",\n                \"booleanValue\": true\n            },\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/AddSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1020,
        "wires": [
            [
                "422f8f9f2d2c4009"
            ]
        ]
    },
    {
        "id": "ce9f35abd4f50dc3",
        "type": "mqtt out",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Device control topic",
        "topic": "spBv1.0/SmartBuildings/DCMD/Building1/Device1",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e55b485152c29769",
        "x": 1000,
        "y": 1040,
        "wires": []
    },
    {
        "id": "3d3890956cc55536",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Rebirth",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/Rebirth\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 960,
        "wires": [
            [
                "422f8f9f2d2c4009"
            ]
        ]
    },
    {
        "id": "ebbdeb160a483119",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "OFF",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/OFF\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 900,
        "wires": [
            [
                "422f8f9f2d2c4009"
            ]
        ]
    },
    {
        "id": "3f6f1f5c976723cf",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Send OFF command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 900,
        "wires": [
            [
                "ebbdeb160a483119"
            ]
        ]
    },
    {
        "id": "02784c3d9970e9ff",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Send AddSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1020,
        "wires": [
            [
                "99aaa7d2f3fe6b24"
            ]
        ]
    },
    {
        "id": "7c68c9335bc0eba8",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Remove Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"NewSensor\"\n            }\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/RemoveSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1080,
        "wires": [
            [
                "422f8f9f2d2c4009"
            ]
        ]
    },
    {
        "id": "a0dd75559cbab257",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Send RemoveSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 1080,
        "wires": [
            [
                "7c68c9335bc0eba8"
            ]
        ]
    },
    {
        "id": "bccf6e86df3779e4",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Update Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"NewSensor\"\n            },\n            {\n                \"name\": \"Mean\",\n                \"doubleValue\": 98.5\n            },\n            {\n                \"name\": \"Std\",\n                \"doubleValue\": 1.8\n            },\n            {\n                \"name\": \"DelayMin\",\n                \"intValue\": 3\n            },\n            {\n                \"name\": \"DelayMax\",\n                \"intValue\": 5\n            },\n            {\n                \"name\": \"Randomize\",\n                \"booleanValue\": false\n            },\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/UpdateSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1140,
        "wires": [
            [
                "422f8f9f2d2c4009"
            ]
        ]
    },
    {
        "id": "ec4597b415098143",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Send UpdateSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 1140,
        "wires": [
            [
                "bccf6e86df3779e4"
            ]
        ]
    },
    {
        "id": "9f15bdb21d0ea917",
        "type": "switch",
        "z": "7f0d673780f6df9b",
        "g": "8bafb5ca9319f25b",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DDATA",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^((?!DDATA).)*$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 760,
        "wires": [
            [
                "49972b90e6d5c71e"
            ],
            [
                "746110e5b3a3049b"
            ]
        ]
    },
    {
        "id": "422f8f9f2d2c4009",
        "type": "encode",
        "z": "7f0d673780f6df9b",
        "g": "171d0d3ab6cf4b60",
        "name": "Building1 encoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Template",
        "x": 750,
        "y": 1020,
        "wires": [
            [
                "551599bd68c97175",
                "ce9f35abd4f50dc3"
            ]
        ]
    },
    {
        "id": "b76c4f18d6f407e8",
        "type": "influxdb batch",
        "z": "7f0d673780f6df9b",
        "g": "8bafb5ca9319f25b",
        "influxdb": "c7e4ea28fcb99a3c",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB/SmartBuildings",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "simulators-project",
        "bucket": "simulators",
        "x": 990,
        "y": 760,
        "wires": []
    },
    {
        "id": "746110e5b3a3049b",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "8bafb5ca9319f25b",
        "name": "Certs",
        "func": "let dTags = {\n    namespace: \"spBv1.0\",\n    group_id: msg.payload.metrics[3].stringValue,\n    node_id: msg.payload.metrics[2].stringValue,\n    device_id: msg.payload.metrics[1].stringValue\n};\n\nlet dFields = {}\n\nfor (let index in msg.payload.metrics) {\n    dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '') + \"_alias\"] = msg.payload.metrics[index].alias\n    if (msg.payload.metrics[index].hasOwnProperty('stringValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"stringValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('longValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"longValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('doubleValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"doubleValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('booleanValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"booleanValue\"])\n    }\n}\n\n\nmsg.payload = [\n    {\n        measurement: \"devices_certs\",\n        fields: dFields,\n        tags: dTags,\n        timestamp: String(msg.payload.timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 780,
        "wires": [
            [
                "b76c4f18d6f407e8"
            ]
        ]
    },
    {
        "id": "49972b90e6d5c71e",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "8bafb5ca9319f25b",
        "name": "Data",
        "func": "let dFields = {}\n\ndFields[msg.payload.metrics[0].alias] = msg.payload.metrics[0][\"doubleValue\"]\n\n\nmsg.payload = [\n    {\n        measurement: \"devices_data\",\n        fields: dFields,\n        tags: {},\n        timestamp: String(msg.payload.metrics[0].timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 740,
        "wires": [
            [
                "b76c4f18d6f407e8"
            ]
        ]
    },
    {
        "id": "ba2747c23a62e368",
        "type": "switch",
        "z": "7f0d673780f6df9b",
        "g": "6da3b79df35d0a20",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DDATA",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^((?!DDATA).)*$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 160,
        "wires": [
            [
                "39ae10cb66f44d42"
            ],
            [
                "fd7a0ea1a81378a5"
            ]
        ]
    },
    {
        "id": "39ae10cb66f44d42",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "6da3b79df35d0a20",
        "name": "Data",
        "func": "let dFields = {}\n\ndFields[msg.payload.metrics[0].alias] = msg.payload.metrics[0][\"doubleValue\"]\n\n\nmsg.payload = [\n    {\n        measurement: \"eonNode_data\",\n        fields: dFields,\n        tags: {},\n        timestamp: String(msg.payload.metrics[0].timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 140,
        "wires": [
            [
                "f734af8d7efff40b"
            ]
        ]
    },
    {
        "id": "fd7a0ea1a81378a5",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "6da3b79df35d0a20",
        "name": "Certs",
        "func": "let dTags = {\n    namespace: \"spBv1.0\",\n    group_id: msg.payload.metrics[2].stringValue,\n    node_id: msg.payload.metrics[1].stringValue\n};\n\nlet dFields = {}\n\nfor (let index in msg.payload.metrics) {\n    dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '') + \"_alias\"] = msg.payload.metrics[index].alias\n    if (msg.payload.metrics[index].hasOwnProperty('stringValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"stringValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('longValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"longValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('doubleValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"doubleValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('booleanValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"booleanValue\"])\n    }\n}\n\nmsg.payload = [\n    {\n        measurement: \"eonNode_certs\",\n        fields: dFields,\n        tags: dTags,\n        timestamp: String(msg.payload.timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 180,
        "wires": [
            [
                "f734af8d7efff40b"
            ]
        ]
    },
    {
        "id": "f734af8d7efff40b",
        "type": "influxdb batch",
        "z": "7f0d673780f6df9b",
        "g": "6da3b79df35d0a20",
        "influxdb": "c7e4ea28fcb99a3c",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB/SmartBuildings",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "simulators-project",
        "bucket": "simulators",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "2a086d8c2cb1c6ed",
        "type": "decode",
        "z": "7f0d673780f6df9b",
        "g": "417ec37e5915bdc6",
        "name": "Building1 dencoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Payload",
        "x": 470,
        "y": 1320,
        "wires": [
            [
                "fdaae2dbc3801c07",
                "82f7fe20016a3a92"
            ]
        ]
    },
    {
        "id": "d46323e97945a666",
        "type": "mqtt in",
        "z": "7f0d673780f6df9b",
        "g": "417ec37e5915bdc6",
        "name": "Encoded DDATA/Devices",
        "topic": "spBv1.0/SmartBuildings/DDATA/Building1/Device2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1280,
        "wires": [
            [
                "2a086d8c2cb1c6ed"
            ]
        ]
    },
    {
        "id": "fdaae2dbc3801c07",
        "type": "debug",
        "z": "7f0d673780f6df9b",
        "g": "417ec37e5915bdc6",
        "name": "Decoded Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1280,
        "wires": []
    },
    {
        "id": "d3b2b93ecfcc178a",
        "type": "mqtt in",
        "z": "7f0d673780f6df9b",
        "g": "417ec37e5915bdc6",
        "name": "Encoded DBIRTH/Devices",
        "topic": "spBv1.0/SmartBuildings/DBIRTH/Building1/Device2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1320,
        "wires": [
            [
                "2a086d8c2cb1c6ed"
            ]
        ]
    },
    {
        "id": "61cccae98438e312",
        "type": "mqtt in",
        "z": "7f0d673780f6df9b",
        "g": "417ec37e5915bdc6",
        "name": "Encoded DDEATH/Devices",
        "topic": "spBv1.0/SmartBuildings/DDEATH/Building1/Device2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1360,
        "wires": [
            [
                "2a086d8c2cb1c6ed"
            ]
        ]
    },
    {
        "id": "82f7fe20016a3a92",
        "type": "switch",
        "z": "7f0d673780f6df9b",
        "g": "417ec37e5915bdc6",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DDATA",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^((?!DDATA).)*$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 1360,
        "wires": [
            [
                "33cf8389453d7303"
            ],
            [
                "c1e84663db1dec8e"
            ]
        ]
    },
    {
        "id": "fb97c83db3c60cd1",
        "type": "influxdb batch",
        "z": "7f0d673780f6df9b",
        "g": "417ec37e5915bdc6",
        "influxdb": "c7e4ea28fcb99a3c",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB/SmartBuildings",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "simulators-project",
        "bucket": "simulators",
        "x": 990,
        "y": 1360,
        "wires": []
    },
    {
        "id": "c1e84663db1dec8e",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "417ec37e5915bdc6",
        "name": "Certs",
        "func": "let dTags = {\n    namespace: \"spBv1.0\",\n    group_id: msg.payload.metrics[3].stringValue,\n    node_id: msg.payload.metrics[2].stringValue,\n    device_id: msg.payload.metrics[1].stringValue\n};\n\nlet dFields = {}\n\nfor (let index in msg.payload.metrics) {\n    dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '') + \"_alias\"] = msg.payload.metrics[index].alias\n    if (msg.payload.metrics[index].hasOwnProperty('stringValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"stringValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('longValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"longValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('doubleValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"doubleValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('booleanValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"booleanValue\"])\n    }\n}\n\n\nmsg.payload = [\n    {\n        measurement: \"devices_certs\",\n        fields: dFields,\n        tags: dTags,\n        timestamp: String(msg.payload.timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1380,
        "wires": [
            [
                "fb97c83db3c60cd1"
            ]
        ]
    },
    {
        "id": "33cf8389453d7303",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "417ec37e5915bdc6",
        "name": "Data",
        "func": "let dFields = {}\n\ndFields[msg.payload.metrics[0].alias] = msg.payload.metrics[0][\"doubleValue\"]\n\n\nmsg.payload = [\n    {\n        measurement: \"devices_data\",\n        fields: dFields,\n        tags: {},\n        timestamp: String(msg.payload.metrics[0].timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1340,
        "wires": [
            [
                "fb97c83db3c60cd1"
            ]
        ]
    },
    {
        "id": "4793a917b9e21984",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Send Rebirth command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1560,
        "wires": [
            [
                "994e1c7fe2a8488f"
            ]
        ]
    },
    {
        "id": "1559d5b083f231a5",
        "type": "debug",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Encoded Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1600,
        "wires": []
    },
    {
        "id": "2bbc63114cbc9a91",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Add Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"anotherSensor\"\n            },\n            {\n                \"name\": \"Mean\",\n                \"doubleValue\": 98.5\n            },\n            {\n                \"name\": \"Std\",\n                \"doubleValue\": 1.8\n            },\n            {\n                \"name\": \"DelayMin\",\n                \"intValue\": 3\n            },\n            {\n                \"name\": \"DelayMax\",\n                \"intValue\": 8\n            },\n            {\n                \"name\": \"Randomize\",\n                \"booleanValue\": true\n            },\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/AddSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1620,
        "wires": [
            [
                "beb151997b41667b"
            ]
        ]
    },
    {
        "id": "2769efccf055206e",
        "type": "mqtt out",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Device control topic",
        "topic": "spBv1.0/SmartBuildings/DCMD/Building1/Device2",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e55b485152c29769",
        "x": 1000,
        "y": 1640,
        "wires": []
    },
    {
        "id": "994e1c7fe2a8488f",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Rebirth",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/Rebirth\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1560,
        "wires": [
            [
                "beb151997b41667b"
            ]
        ]
    },
    {
        "id": "3fa0850b68f2328e",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "OFF",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/OFF\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1500,
        "wires": [
            [
                "beb151997b41667b"
            ]
        ]
    },
    {
        "id": "0f445547a709d54a",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Send OFF command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1500,
        "wires": [
            [
                "3fa0850b68f2328e"
            ]
        ]
    },
    {
        "id": "2c208663d771ab43",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Send AddSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1620,
        "wires": [
            [
                "2bbc63114cbc9a91"
            ]
        ]
    },
    {
        "id": "b3bc1b4787f6bd8d",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Remove Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"NewSensor\"\n            }\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/RemoveSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1680,
        "wires": [
            [
                "beb151997b41667b"
            ]
        ]
    },
    {
        "id": "b57317f239364730",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Send RemoveSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 1680,
        "wires": [
            [
                "b3bc1b4787f6bd8d"
            ]
        ]
    },
    {
        "id": "f08fb4622c506982",
        "type": "function",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Update Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"NewSensor\"\n            },\n            {\n                \"name\": \"Mean\",\n                \"doubleValue\": 98.5\n            },\n            {\n                \"name\": \"Std\",\n                \"doubleValue\": 1.8\n            },\n            {\n                \"name\": \"DelayMin\",\n                \"intValue\": 3\n            },\n            {\n                \"name\": \"DelayMax\",\n                \"intValue\": 5\n            },\n            {\n                \"name\": \"Randomize\",\n                \"booleanValue\": false\n            },\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/UpdateSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1740,
        "wires": [
            [
                "beb151997b41667b"
            ]
        ]
    },
    {
        "id": "193b26078302fdc0",
        "type": "inject",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Send UpdateSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 1740,
        "wires": [
            [
                "f08fb4622c506982"
            ]
        ]
    },
    {
        "id": "beb151997b41667b",
        "type": "encode",
        "z": "7f0d673780f6df9b",
        "g": "9745e11ad525fcea",
        "name": "Building1 encoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Template",
        "x": 750,
        "y": 1620,
        "wires": [
            [
                "1559d5b083f231a5",
                "2769efccf055206e"
            ]
        ]
    },
    {
        "id": "f469fa6a932099b4",
        "type": "comment",
        "z": "2b3ad0efc0c9de04",
        "name": "SmartBuildings-Building2",
        "info": "This flow contains all the defined commands\nto control the EoN Node and all the devices\nassociated with it.",
        "x": 1850,
        "y": 40,
        "wires": []
    },
    {
        "id": "cd70e6e010e9fafb",
        "type": "decode",
        "z": "2b3ad0efc0c9de04",
        "g": "20b68a47c776eebe",
        "name": "Building2 dencoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Payload",
        "x": 480,
        "y": 720,
        "wires": [
            [
                "92ca171020c6d159",
                "b23dc5a3799b905f"
            ]
        ]
    },
    {
        "id": "abd42134628615d8",
        "type": "mqtt in",
        "z": "2b3ad0efc0c9de04",
        "g": "20b68a47c776eebe",
        "name": "Encoded DDATA/Devices",
        "topic": "spBv1.0/SmartBuildings/DDATA/Building2/Device1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "cd70e6e010e9fafb"
            ]
        ]
    },
    {
        "id": "92ca171020c6d159",
        "type": "debug",
        "z": "2b3ad0efc0c9de04",
        "g": "20b68a47c776eebe",
        "name": "Decoded Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 680,
        "wires": []
    },
    {
        "id": "7dfa8e4dfeb69857",
        "type": "mqtt in",
        "z": "2b3ad0efc0c9de04",
        "g": "20b68a47c776eebe",
        "name": "Encoded DBIRTH/Devices",
        "topic": "spBv1.0/SmartBuildings/DBIRTH/Building2/Device1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 720,
        "wires": [
            [
                "cd70e6e010e9fafb"
            ]
        ]
    },
    {
        "id": "ddf4f644a4443dbe",
        "type": "mqtt in",
        "z": "2b3ad0efc0c9de04",
        "g": "20b68a47c776eebe",
        "name": "Encoded DDEATH/Devices",
        "topic": "spBv1.0/SmartBuildings/DDEATH/Building2/Device1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 760,
        "wires": [
            [
                "cd70e6e010e9fafb"
            ]
        ]
    },
    {
        "id": "b23dc5a3799b905f",
        "type": "switch",
        "z": "2b3ad0efc0c9de04",
        "g": "20b68a47c776eebe",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DDATA",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^((?!DDATA).)*$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 760,
        "wires": [
            [
                "91ce81a7ff4d52f0"
            ],
            [
                "32f63145989837fa"
            ]
        ]
    },
    {
        "id": "548597b079b5aaf4",
        "type": "influxdb batch",
        "z": "2b3ad0efc0c9de04",
        "g": "20b68a47c776eebe",
        "influxdb": "c7e4ea28fcb99a3c",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB/SmartBuildings",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "simulators-project",
        "bucket": "simulators",
        "x": 1000,
        "y": 760,
        "wires": []
    },
    {
        "id": "32f63145989837fa",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "20b68a47c776eebe",
        "name": "Certs",
        "func": "let dTags = {\n    namespace: \"spBv1.0\",\n    group_id: msg.payload.metrics[3].stringValue,\n    node_id: msg.payload.metrics[2].stringValue,\n    device_id: msg.payload.metrics[1].stringValue\n};\n\nlet dFields = {}\n\nfor (let index in msg.payload.metrics) {\n    dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '') + \"_alias\"] = msg.payload.metrics[index].alias\n    if (msg.payload.metrics[index].hasOwnProperty('stringValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"stringValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('longValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"longValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('doubleValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"doubleValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('booleanValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"booleanValue\"])\n    }\n}\n\n\nmsg.payload = [\n    {\n        measurement: \"devices_certs\",\n        fields: dFields,\n        tags: dTags,\n        timestamp: String(msg.payload.timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 780,
        "wires": [
            [
                "548597b079b5aaf4"
            ]
        ]
    },
    {
        "id": "91ce81a7ff4d52f0",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "20b68a47c776eebe",
        "name": "Data",
        "func": "let dFields = {}\n\ndFields[msg.payload.metrics[0].alias] = msg.payload.metrics[0][\"doubleValue\"]\n\n\nmsg.payload = [\n    {\n        measurement: \"devices_data\",\n        fields: dFields,\n        tags: {},\n        timestamp: String(msg.payload.metrics[0].timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 740,
        "wires": [
            [
                "548597b079b5aaf4"
            ]
        ]
    },
    {
        "id": "df2d5280ae0fb598",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Send Rebirth command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 960,
        "wires": [
            [
                "d4c813cff0b3827d"
            ]
        ]
    },
    {
        "id": "c0ad3c25f05c2fbe",
        "type": "debug",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Encoded Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f34c90459a133522",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Add Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"NewSensor\"\n            },\n            {\n                \"name\": \"Mean\",\n                \"doubleValue\": 18.5\n            },\n            {\n                \"name\": \"Std\",\n                \"doubleValue\": 1.8\n            },\n            {\n                \"name\": \"DelayMin\",\n                \"intValue\": 5\n            },\n            {\n                \"name\": \"DelayMax\",\n                \"intValue\": 8\n            },\n            {\n                \"name\": \"Randomize\",\n                \"booleanValue\": true\n            },\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/AddSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "40b2494b80d59115"
            ]
        ]
    },
    {
        "id": "21bbf46e154ab08f",
        "type": "mqtt out",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Device control topic",
        "topic": "spBv1.0/SmartBuildings/DCMD/Building2/Device1",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e55b485152c29769",
        "x": 1010,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d4c813cff0b3827d",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Rebirth",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/Rebirth\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 960,
        "wires": [
            [
                "40b2494b80d59115"
            ]
        ]
    },
    {
        "id": "737ab5202fc2bb22",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "OFF",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/OFF\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 900,
        "wires": [
            [
                "40b2494b80d59115"
            ]
        ]
    },
    {
        "id": "94c0cdcacebca5a9",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Send OFF command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 900,
        "wires": [
            [
                "737ab5202fc2bb22"
            ]
        ]
    },
    {
        "id": "9dbf3de831e4b7dc",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Send AddSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1020,
        "wires": [
            [
                "f34c90459a133522"
            ]
        ]
    },
    {
        "id": "0e0efea877e73e10",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Remove Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"NewSensor\"\n            }\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/RemoveSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1080,
        "wires": [
            [
                "40b2494b80d59115"
            ]
        ]
    },
    {
        "id": "2dd989669e9b922a",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Send RemoveSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 1080,
        "wires": [
            [
                "0e0efea877e73e10"
            ]
        ]
    },
    {
        "id": "ad7f65a720ec1ba8",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Update Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"NewSensor\"\n            },\n            {\n                \"name\": \"Mean\",\n                \"doubleValue\": 98.5\n            },\n            {\n                \"name\": \"Std\",\n                \"doubleValue\": 1.8\n            },\n            {\n                \"name\": \"DelayMin\",\n                \"intValue\": 3\n            },\n            {\n                \"name\": \"DelayMax\",\n                \"intValue\": 5\n            },\n            {\n                \"name\": \"Randomize\",\n                \"booleanValue\": false\n            },\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/UpdateSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1140,
        "wires": [
            [
                "40b2494b80d59115"
            ]
        ]
    },
    {
        "id": "91741ca912b769c7",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Send UpdateSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 1140,
        "wires": [
            [
                "ad7f65a720ec1ba8"
            ]
        ]
    },
    {
        "id": "40b2494b80d59115",
        "type": "encode",
        "z": "2b3ad0efc0c9de04",
        "g": "31816bb2c3870f72",
        "name": "Building2 encoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Template",
        "x": 760,
        "y": 1020,
        "wires": [
            [
                "c0ad3c25f05c2fbe",
                "21bbf46e154ab08f"
            ]
        ]
    },
    {
        "id": "2e728a148feca51f",
        "type": "decode",
        "z": "2b3ad0efc0c9de04",
        "g": "3aec62b303b86ab9",
        "name": "Building2 dencoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Payload",
        "x": 500,
        "y": 120,
        "wires": [
            [
                "fd319b82678659d2",
                "2f61ff79e5fb01d0"
            ]
        ]
    },
    {
        "id": "4a492193a89d7ae6",
        "type": "mqtt in",
        "z": "2b3ad0efc0c9de04",
        "g": "3aec62b303b86ab9",
        "name": "Encoded NBIRTH/EoN-Node",
        "topic": "spBv1.0/SmartBuildings/NBIRTH/Building2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "2e728a148feca51f"
            ]
        ]
    },
    {
        "id": "fd319b82678659d2",
        "type": "debug",
        "z": "2b3ad0efc0c9de04",
        "g": "3aec62b303b86ab9",
        "name": "Decoded Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 80,
        "wires": []
    },
    {
        "id": "034fcab56b9edee1",
        "type": "mqtt in",
        "z": "2b3ad0efc0c9de04",
        "g": "3aec62b303b86ab9",
        "name": "Encoded NDEATH/EoN-Node",
        "topic": "spBv1.0/SmartBuildings/NDEATH/Building2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 120,
        "wires": [
            [
                "2e728a148feca51f"
            ]
        ]
    },
    {
        "id": "b324b29d5796b2b1",
        "type": "mqtt in",
        "z": "2b3ad0efc0c9de04",
        "g": "3aec62b303b86ab9",
        "name": "Encoded NDATA/EoN-Node",
        "topic": "spBv1.0/SmartBuildings/NDATA/Building2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "2e728a148feca51f"
            ]
        ]
    },
    {
        "id": "20117163211756e3",
        "type": "influxdb batch",
        "z": "2b3ad0efc0c9de04",
        "g": "3aec62b303b86ab9",
        "influxdb": "c7e4ea28fcb99a3c",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB/SmartBuildings",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "simulators-project",
        "bucket": "simulators",
        "x": 1020,
        "y": 160,
        "wires": []
    },
    {
        "id": "92678d330abe090a",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "3aec62b303b86ab9",
        "name": "Data",
        "func": "let dFields = {}\n\ndFields[msg.payload.metrics[0].alias] = msg.payload.metrics[0][\"doubleValue\"]\n\n\nmsg.payload = [\n    {\n        measurement: \"eonNode_data\",\n        fields: dFields,\n        tags: {},\n        timestamp: String(msg.payload.metrics[0].timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 140,
        "wires": [
            [
                "20117163211756e3"
            ]
        ]
    },
    {
        "id": "352c791d8c0e4d69",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "3aec62b303b86ab9",
        "name": "Certs",
        "func": "let dTags = {\n    namespace: \"spBv1.0\",\n    group_id: msg.payload.metrics[2].stringValue,\n    node_id: msg.payload.metrics[1].stringValue\n};\n\nlet dFields = {}\n\nfor (let index in msg.payload.metrics) {\n    dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '') + \"_alias\"] = msg.payload.metrics[index].alias\n    if (msg.payload.metrics[index].hasOwnProperty('stringValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"stringValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('longValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"longValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('doubleValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"doubleValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('booleanValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"booleanValue\"])\n    }\n}\n\nmsg.payload = [\n    {\n        measurement: \"eonNode_certs\",\n        fields: dFields,\n        tags: dTags,\n        timestamp: String(msg.payload.timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 180,
        "wires": [
            [
                "20117163211756e3"
            ]
        ]
    },
    {
        "id": "2f61ff79e5fb01d0",
        "type": "switch",
        "z": "2b3ad0efc0c9de04",
        "g": "3aec62b303b86ab9",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DDATA",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^((?!DDATA).)*$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 160,
        "wires": [
            [
                "92678d330abe090a"
            ],
            [
                "352c791d8c0e4d69"
            ]
        ]
    },
    {
        "id": "0d625e86edada3f5",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Send Rebirth command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "25c6b77e96e64c06"
            ]
        ]
    },
    {
        "id": "c559ccd57d877dcd",
        "type": "encode",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Building2 encoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Template",
        "x": 760,
        "y": 400,
        "wires": [
            [
                "ecd31ded4c37b860",
                "b5643cab47fc1504"
            ]
        ]
    },
    {
        "id": "ecd31ded4c37b860",
        "type": "debug",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Encoded Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 380,
        "wires": []
    },
    {
        "id": "7f93069de9127763",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Reboot",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Node Control/Reboot\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 400,
        "wires": [
            [
                "c559ccd57d877dcd"
            ]
        ]
    },
    {
        "id": "b5643cab47fc1504",
        "type": "mqtt out",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "EoN Node control topic",
        "topic": "spBv1.0/SmartBuildings/NCMD/Building2",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e55b485152c29769",
        "x": 1010,
        "y": 420,
        "wires": []
    },
    {
        "id": "25c6b77e96e64c06",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Rebirth",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Node Control/Rebirth\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "c559ccd57d877dcd"
            ]
        ]
    },
    {
        "id": "8aa3d900e29f1924",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Shutdown",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Node Control/Shutdown\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 340,
        "wires": [
            [
                "c559ccd57d877dcd"
            ]
        ]
    },
    {
        "id": "c80a72d607ab6666",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Send Shutdown command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 340,
        "wires": [
            [
                "8aa3d900e29f1924"
            ]
        ]
    },
    {
        "id": "cbbb339ca14fbe45",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Send Reboot command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "7f93069de9127763"
            ]
        ]
    },
    {
        "id": "9e5ac2690e575360",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Remove Device",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"DeviceId\",\n                \"stringValue\": \"Device1-spB\"\n            }\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Node Control/RemoveDevice\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 460,
        "wires": [
            [
                "c559ccd57d877dcd"
            ]
        ]
    },
    {
        "id": "8a9118dab5aeaea1",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Send RemoveDevice command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "9e5ac2690e575360"
            ]
        ]
    },
    {
        "id": "6d22026577415938",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Add Device",
        "func": "msg.payload = {\n    \"version\": \"v1.0.0\",\n    \"isDefinition\": true,\n    \"parameters\": [\n        {\n            \"name\": \"DeviceId\",\n            \"stringValue\": \"Device1-spB\"\n        },\n        {\n            \"name\": \"StoreAndForward\",\n            \"booleanValue\": true\n        },\n        {\n            \"name\": \"TTL\",\n            \"intValue\": 10\n        }\n        \n    ],\n    \"metrics\": [\n        {\n            \"name\": \"Node Control/AddDevice\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 520,
        "wires": [
            [
                "c559ccd57d877dcd"
            ]
        ]
    },
    {
        "id": "92d69c33872b032c",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "244f5490830221f1",
        "name": "Send AddDevice command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 520,
        "wires": [
            [
                "6d22026577415938"
            ]
        ]
    },
    {
        "id": "05eaed14970d561c",
        "type": "decode",
        "z": "2b3ad0efc0c9de04",
        "g": "bac4adefc1db22cc",
        "name": "Building2 dencoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Payload",
        "x": 480,
        "y": 1320,
        "wires": [
            [
                "e78af3b44217bec7",
                "7b8301777e8fd10b"
            ]
        ]
    },
    {
        "id": "8c52124fa6b299ee",
        "type": "mqtt in",
        "z": "2b3ad0efc0c9de04",
        "g": "bac4adefc1db22cc",
        "name": "Encoded DDATA/Devices",
        "topic": "spBv1.0/SmartBuildings/DDATA/Building2/Device2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1280,
        "wires": [
            [
                "05eaed14970d561c"
            ]
        ]
    },
    {
        "id": "e78af3b44217bec7",
        "type": "debug",
        "z": "2b3ad0efc0c9de04",
        "g": "bac4adefc1db22cc",
        "name": "Decoded Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1280,
        "wires": []
    },
    {
        "id": "530ccf3171ca22b4",
        "type": "mqtt in",
        "z": "2b3ad0efc0c9de04",
        "g": "bac4adefc1db22cc",
        "name": "Encoded DBIRTH/Devices",
        "topic": "spBv1.0/SmartBuildings/DBIRTH/Building2/Device2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1320,
        "wires": [
            [
                "05eaed14970d561c"
            ]
        ]
    },
    {
        "id": "d44eb987962e1f9f",
        "type": "mqtt in",
        "z": "2b3ad0efc0c9de04",
        "g": "bac4adefc1db22cc",
        "name": "Encoded DDEATH/Devices",
        "topic": "spBv1.0/SmartBuildings/DDEATH/Building2/Device2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e55b485152c29769",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1360,
        "wires": [
            [
                "05eaed14970d561c"
            ]
        ]
    },
    {
        "id": "7b8301777e8fd10b",
        "type": "switch",
        "z": "2b3ad0efc0c9de04",
        "g": "bac4adefc1db22cc",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "DDATA",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^((?!DDATA).)*$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1360,
        "wires": [
            [
                "469e67b9775ff53e"
            ],
            [
                "5281945513309ad1"
            ]
        ]
    },
    {
        "id": "3ead494d37ab3440",
        "type": "influxdb batch",
        "z": "2b3ad0efc0c9de04",
        "g": "bac4adefc1db22cc",
        "influxdb": "c7e4ea28fcb99a3c",
        "precision": "",
        "retentionPolicy": "",
        "name": "InfluxDB/SmartBuildings",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "simulators-project",
        "bucket": "simulators",
        "x": 1000,
        "y": 1360,
        "wires": []
    },
    {
        "id": "5281945513309ad1",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "bac4adefc1db22cc",
        "name": "Certs",
        "func": "let dTags = {\n    namespace: \"spBv1.0\",\n    group_id: msg.payload.metrics[3].stringValue,\n    node_id: msg.payload.metrics[2].stringValue,\n    device_id: msg.payload.metrics[1].stringValue\n};\n\nlet dFields = {}\n\nfor (let index in msg.payload.metrics) {\n    dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '') + \"_alias\"] = msg.payload.metrics[index].alias\n    if (msg.payload.metrics[index].hasOwnProperty('stringValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"stringValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('longValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"longValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('doubleValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"doubleValue\"])\n    } else if (msg.payload.metrics[index].hasOwnProperty('booleanValue')) {\n        dFields[msg.payload.metrics[index].name.replace(/\\s+/g, '')] = String(msg.payload.metrics[index][\"booleanValue\"])\n    }\n}\n\n\nmsg.payload = [\n    {\n        measurement: \"devices_certs\",\n        fields: dFields,\n        tags: dTags,\n        timestamp: String(msg.payload.timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1380,
        "wires": [
            [
                "3ead494d37ab3440"
            ]
        ]
    },
    {
        "id": "469e67b9775ff53e",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "bac4adefc1db22cc",
        "name": "Data",
        "func": "let dFields = {}\n\ndFields[msg.payload.metrics[0].alias] = msg.payload.metrics[0][\"doubleValue\"]\n\n\nmsg.payload = [\n    {\n        measurement: \"devices_data\",\n        fields: dFields,\n        tags: {},\n        timestamp: String(msg.payload.metrics[0].timestamp)\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1340,
        "wires": [
            [
                "3ead494d37ab3440"
            ]
        ]
    },
    {
        "id": "fdde9dd34d45f719",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Send Rebirth command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1560,
        "wires": [
            [
                "d592e10918830efa"
            ]
        ]
    },
    {
        "id": "075fba145cf00ea2",
        "type": "debug",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Encoded Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1600,
        "wires": []
    },
    {
        "id": "ea706d145650fd5a",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Add Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"anotherSensor\"\n            },\n            {\n                \"name\": \"Mean\",\n                \"doubleValue\": 98.5\n            },\n            {\n                \"name\": \"Std\",\n                \"doubleValue\": 1.8\n            },\n            {\n                \"name\": \"DelayMin\",\n                \"intValue\": 3\n            },\n            {\n                \"name\": \"DelayMax\",\n                \"intValue\": 8\n            },\n            {\n                \"name\": \"Randomize\",\n                \"booleanValue\": true\n            },\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/AddSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1620,
        "wires": [
            [
                "0333b5f36fdb40d4"
            ]
        ]
    },
    {
        "id": "979ea2d7c55ad607",
        "type": "mqtt out",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Device control topic",
        "topic": "spBv1.0/SmartBuildings/DCMD/Building2/Device2",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e55b485152c29769",
        "x": 1010,
        "y": 1640,
        "wires": []
    },
    {
        "id": "d592e10918830efa",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Rebirth",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/Rebirth\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1560,
        "wires": [
            [
                "0333b5f36fdb40d4"
            ]
        ]
    },
    {
        "id": "01ab47e67cb8cc52",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "OFF",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/OFF\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1500,
        "wires": [
            [
                "0333b5f36fdb40d4"
            ]
        ]
    },
    {
        "id": "51f586ca63f91c7f",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Send OFF command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1500,
        "wires": [
            [
                "01ab47e67cb8cc52"
            ]
        ]
    },
    {
        "id": "1fcfc93057cb9005",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Send AddSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1620,
        "wires": [
            [
                "ea706d145650fd5a"
            ]
        ]
    },
    {
        "id": "e8909f286a356862",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Remove Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"NewSensor\"\n            }\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/RemoveSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1680,
        "wires": [
            [
                "0333b5f36fdb40d4"
            ]
        ]
    },
    {
        "id": "47d2c343452293dd",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Send RemoveSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 1680,
        "wires": [
            [
                "e8909f286a356862"
            ]
        ]
    },
    {
        "id": "1358b5250e5b6c6d",
        "type": "function",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Update Sensor",
        "func": "msg.payload = {\n        \"version\": \"v1.0.0\",\n        \"isDefinition\": true,\n        \"parameters\": [\n            {\n                \"name\": \"SensorId\",\n                \"stringValue\": \"NewSensor\"\n            },\n            {\n                \"name\": \"Mean\",\n                \"doubleValue\": 98.5\n            },\n            {\n                \"name\": \"Std\",\n                \"doubleValue\": 1.8\n            },\n            {\n                \"name\": \"DelayMin\",\n                \"intValue\": 3\n            },\n            {\n                \"name\": \"DelayMax\",\n                \"intValue\": 5\n            },\n            {\n                \"name\": \"Randomize\",\n                \"booleanValue\": false\n            },\n        ],\n         \"metrics\": [\n        {\n            \"name\": \"Device Control/UpdateSimulator\",\n            \"booleanValue\": true\n        }\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1740,
        "wires": [
            [
                "0333b5f36fdb40d4"
            ]
        ]
    },
    {
        "id": "44a761d1858c7761",
        "type": "inject",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Send UpdateSensor command",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 1740,
        "wires": [
            [
                "1358b5250e5b6c6d"
            ]
        ]
    },
    {
        "id": "0333b5f36fdb40d4",
        "type": "encode",
        "z": "2b3ad0efc0c9de04",
        "g": "f6a3536813d66c1b",
        "name": "Building2 encoder",
        "protofile": "33ba13cd985b8439",
        "protoType": "Template",
        "x": 760,
        "y": 1620,
        "wires": [
            [
                "075fba145cf00ea2",
                "979ea2d7c55ad607"
            ]
        ]
    }
]